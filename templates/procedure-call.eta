<%
const { utils, route, config } = it;
const { constants } = config;
const { TS_KEYWORDS } = constants;
const { specificArgNameResolver } = route;
const { _, getInlineParseContent, classNameCase } = utils;
const { parameters, path, method, payload, query, formData, requestParams } = route.request;

// TODO：这种方式其实是不对的，有可能出现 Record<string, DDD> 或者其他的情况
const isTsType = (type) => {
    const isType=  _.includes(_.values(TS_KEYWORDS), type);
    return isType || type.startsWith('Record')
}
// parameters 参数
// path 路径
// payload body 中的参数
// query // query
// formData //
// requestParams  这个是 path 和 query 的合并起来的数据, 这个是是只有query 和 path 都有的情况
// pathParams path 参数
// console.log('payload', payload) 
const { type } = route.response;
const { RESERVED_REQ_PARAMS_ARG_NAMES } = config.constants;
const routeDocs = includeFile("@base/route-docs", { config, route, utils });
// query
const queryName = (query && query.name) || "query";
// pathParams 来自 parameters 看起来是和 pathParams 一样 
const pathParams = _.values(parameters);
// 形成参数
const pathParamsNames = _.map(pathParams, "name");
const parsePathParams = (pathParamsArr) => {
    const pathParamsStrArr = pathParamsArr.map((o) => {
        return `${o.name}: ${o.type}`
    })
    return `{${pathParamsStrArr.join(', ')}}`
} 

const requestConfigParam = {
    name: specificArgNameResolver.resolve(RESERVED_REQ_PARAMS_ARG_NAMES),
    optional: true,
    type: "AxiosRequestConfig",
    defaultValue: "{}",
}

const argToTmpl = ({ name, optional, type, defaultValue }) => `${name}${!defaultValue && optional ? '?' : ''}: ${type}${defaultValue ? ` = ${defaultValue}` : ''}`;
// console.log('path', route.request)
if(route.request.query){
    // console.log(route.request)
}
const _payload = payload;
if( payload && payload.type && !payload.type.startsWith('{') && !isTsType(type)) { 
    _payload.type = `defs.${payload.type.replace(/(\(|\))/g, '')}` 
}
// extractRequestParams querey 和 pathParams 合并，没有的话 就不合并 
const rawWrapperArgs =
    _.compact([
        requestParams && {
          name: pathParams.length ? `{ ${_.join(pathParamsNames, ", ")}, ...${queryName} }` : queryName,
          optional: false,
          type: `${getInlineParseContent(requestParams)} | ${classNameCase(route.routeName.usage)}_`,
        },
        (!requestParams && pathParams.length ? {
          name: `{ ${_.join(pathParamsNames, ", ")} }`,
          optional: false,
          type: `${parsePathParams(pathParams)} | ${classNameCase(route.routeName.usage)}_`,
        } : null),
        _payload,
        requestConfigParam,
    ])

const wrapperArgs = _
    // Sort by optionality
    .sortBy(rawWrapperArgs, [o => o.optional])
    .map(argToTmpl)
    .join(', ')

const bodyTmpl = _.get(payload, "name") || null;
const queryTmpl = (query != null && queryName) || null;
let requestType = type;
if(!isTsType(type)) {
    requestType = `defs.${type.replace(/(\(|\))/g, '')}`;
}
%>
/**
<%~ routeDocs.description %>

 * <% /* Here you can add some other JSDoc tags */ %>

<%~ routeDocs.lines %>

 */
<%~ route.routeName.usage %> = (<%~ wrapperArgs %>) =>
    http.request<<%~ `${requestType}` %>>({
        url: `<%~ path %>`,
        method: '<%~ _.upperCase(method) %>',
        <%~ queryTmpl ? `params: ${queryTmpl},` : '' %>
        <%~ bodyTmpl ? `data: ${bodyTmpl},` : '' %>
        ...<%~ _.get(requestConfigParam, "name") %>,
    })